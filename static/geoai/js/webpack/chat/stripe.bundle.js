/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/original/stripe/stripe_elements.js":
/*!***********************************************!*\
  !*** ./js/original/stripe/stripe_elements.js ***!
  \***********************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return { value: void 0, done: !0 }; } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable || \"\" === iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } throw new TypeError(_typeof(iterable) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar GeoStripe = /*#__PURE__*/function () {\n  function GeoStripe() {\n    _classCallCheck(this, GeoStripe);\n    this.stripe = Stripe(this.publicKey); // Initiate Stripe.\n    this.stripeElement = this.stripe.elements(); // Create Stripe elements.\n    this.card = this.stripeElement.create('card'); // Create card element.\n    this.card.mount('#card-element'); // Mount card to div#card-element.\n\n    this.csrfToken = this.getElm('input[name=\"csrfmiddlewaretoken\"]').value;\n    this.cardValdation; // Card element realtime error valitator.\n\n    this.submitCheckoutForm;\n  }\n  _createClass(GeoStripe, [{\n    key: \"publicKey\",\n    get: function get() {\n      return this.getElm('#id_stripe_publc_key').textContent.slice(1, -1);\n    }\n  }, {\n    key: \"clientSecretKey\",\n    get: function get() {\n      return this.getElm('#id_stripe_client_secret_key').textContent.slice(1, -1);\n    }\n  }, {\n    key: \"paymentAmount\",\n    get: function get() {\n      return this.getElm('#payment-amount').textContent;\n    }\n\n    // Grab the HTML element.\n  }, {\n    key: \"getElm\",\n    value: function getElm(attr) {\n      return document.querySelector(attr);\n    }\n\n    // Handle realtime validation errors on the card element.\n  }, {\n    key: \"cardValdation\",\n    get: function get() {\n      var _this = this;\n      this.card.addEventListener('change', function (event) {\n        if (event.error) {\n          var html = \"\\n                    <span class=\\\"icon\\\" role=\\\"alert\\\">\\n                        <i class=\\\"fas fa-times\\\"></i>\\n                    </span>\\n                    <span>\".concat(event.error.message, \"</span>\\n                \");\n          _this.getElm('#card-errors').innerHTML = html;\n        } else {\n          _this.getElm('#card-errors').textContent = '';\n        }\n      });\n    }\n  }, {\n    key: \"submitCheckoutForm\",\n    get: function get() {\n      var _this2 = this;\n      // Add the `submit` event to the payment form.\n      this.getElm('#payment-form').addEventListener('submit', function (event) {\n        // Prevent default behaviour.\n        event.preventDefault();\n\n        // Desable card and submit button to avoid multiple payment request.\n        _this2.card.update({\n          'disabled': true\n        });\n        _this2.getElm('#payment-button').disabled = true; // Submit button.\n\n        // Url for the payment data cache view.\n        var url = '/payment/cache-checkout-data/';\n\n        // Data for the payment data view.\n        var postData = {\n          'csrfmiddlewaretoken': _this2.csrfToken,\n          'client_secret': _this2.clientSecretKey,\n          'amount': _this2.paymentAmount\n        };\n\n        // Call the cache view.\n        fetch(url, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          },\n          body: new URLSearchParams(postData).toString()\n\n          // Check if there is a error.\n        }).then(function (response) {\n          if (!response.ok) {\n            throw new Error('There was a problem to conect to the Stripe server. \\\n                    Please try later');\n          }\n\n          // Afetr the caching the payment data confirm the card.\n        }).then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _this2.stripe.confirmCardPayment(_this2.clientSecretKey, {\n                  payment_method: {\n                    card: _this2.card\n                  }\n\n                  // Result of the confirmation.\n                }).then(function (result) {\n                  // Check errors of the confirmation.\n                  if (result.error) {\n                    // Error message.\n                    var html = \"\\n                            <span class=\\\"icon\\\" role=\\\"alert\\\">\\n                            <i class=\\\"fas fa-times\\\"></i>\\n                            </span>\\n                            <span>\".concat(result.error.message, \"</span>\");\n\n                    // Append error message to the error div.\n                    _this2.getElm('#card-errors').innerHTML = html;\n\n                    // Enable card and submit button.\n                    _this2.card.update({\n                      'disabled': false\n                    });\n                    _this2.getElm('#payment-form').disabled = false;\n\n                    // If there is no error, submit the payment form.\n                  } else {\n                    // Check if the payment intent was succeeded.\n                    if (result.paymentIntent.status === 'succeeded') {\n                      // Submit the payment form.\n                      _this2.getElm('#payment-form').submit();\n                    }\n                  }\n                });\n              case 2:\n                return _context.abrupt(\"return\", _context.sent);\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee);\n        })))[\"catch\"](function () {\n          location.reload();\n        });\n      });\n    }\n  }]);\n  return GeoStripe;\n}();\nnew GeoStripe();\n\n// let stripePublicKey = document.getElementById('id_stripe_publc_key')\n//     .textContent.slice(1, -1);\n\n// let stripeClientSecretKey = document.getElementById('id_stripe_client_secret_key')\n//     .textContent.slice(1, -1);\n\n// const stripe = Stripe(stripePublicKey);\n// const elements = stripe.elements();\n\n// const style = {\n//    style: {\n//     base: {\n//       iconColor: '#c4f0ff',\n//       color: '#fff',\n//       fontWeight: '500',\n//       fontFamily: 'Roboto, Open Sans, Segoe UI, sans-serif',\n//       fontSize: '16px',\n//       fontSmoothing: 'antialiased',\n//       ':-webkit-autofill': {\n//         color: '#fce883',\n//       },\n//       '::placeholder': {\n//         color: '#87BBFD',\n//       },\n//     },\n//     invalid: {\n//       iconColor: '#FFC7EE',\n//       color: '#FFC7EE',\n//     },\n//   },\n// };\n\n// const card = elements.create('card');\n// card.mount('#card-element');\n\n// // Handle realtime validation errors on the card element\n// card.addEventListener('change', function (event) {\n//     var errorDiv = document.getElementById('card-errors');\n//     if (event.error) {\n//         var html = `\n//             <span class=\"icon\" role=\"alert\">\n//                 <i class=\"fas fa-times\"></i>\n//             </span>\n//             <span>${event.error.message}</span>\n//         `;\n//         errorDiv.innerHTML = html;\n//     } else {\n//         errorDiv.textContent = '';\n//     }\n// });\n\n// // Grab the payment form.\n// const form = document.getElementById('payment-form');\n\n// form.addEventListener('submit', function (ev) {\n\n//     ev.preventDefault();\n\n//     // Desable card and submit button to avoid multiple payment request.\n//     card.update({'disabled': true });\n//     paymentButton = document.getElementById('payment-button');\n//     paymentButton.disabled = true;\n\n//     stripe.confirmCardPayment(stripeClientSecretKey, {\n//         payment_method: {\n//             card: card,\n//         }\n//     }).then(function(result) {\n//         if (result.error) {\n//             // Error message div.\n//             const errorDiv = document.getElementById('card-errors');\n//             // Error message.\n//             const html = `\n//                 <span class=\"icon\" role=\"alert\">\n//                 <i class=\"fas fa-times\"></i>\n//                 </span>\n//                 <span>${result.error.message}</span>`;\n//             // Append error message to the error div.\n//             errorDiv.innerHTML = html;\n\n//             // Enable card and submit button.\n//             card.update({'disabled': false});\n//             paymentButton.disabled = false;\n\n//         } else { // If there is no error, submit the form.\n//             if (result.paymentIntent.status === 'succeeded') {\n//                 form.submit();\n//             }\n//         }\n//     });        \n\n// });\n\n//# sourceURL=webpack://geoai/./js/original/stripe/stripe_elements.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./js/original/stripe/stripe_elements.js"]();
/******/ 	
/******/ })()
;