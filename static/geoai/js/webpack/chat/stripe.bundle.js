/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/original/stripe/stripe_elements.js":
/*!***********************************************!*\
  !*** ./js/original/stripe/stripe_elements.js ***!
  \***********************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar GeoStripe = /*#__PURE__*/function () {\n  function GeoStripe() {\n    _classCallCheck(this, GeoStripe);\n    this.stripe = Stripe(this.publicKey); // Initiate Stripe.\n    this.stripeElement = this.stripe.elements(); // Create Stripe elements.\n    this.card = this.stripeElement.create('card'); // Create card element.\n    this.card.mount('#card-element'); // Mount card to div#card-element.\n    this.cardValdation; // Card element realtime error valitator.\n    this.submitCheckoutForm; // Submit checkout form.\n  }\n  _createClass(GeoStripe, [{\n    key: \"publicKey\",\n    get: function get() {\n      var elm = document.getElementById('id_stripe_publc_key');\n      return elm.textContent.slice(1, -1);\n    }\n  }, {\n    key: \"clientSecretKey\",\n    get: function get() {\n      var elm = document.getElementById('id_stripe_client_secret_key');\n      return elm.textContent.slice(1, -1);\n    }\n  }, {\n    key: \"paymentForm\",\n    get: function get() {\n      return document.getElementById('payment-form');\n    }\n  }, {\n    key: \"paymentButton\",\n    get: function get() {\n      return document.getElementById('payment-button');\n    }\n  }, {\n    key: \"errorDiv\",\n    get: function get() {\n      return document.getElementById('card-errors');\n    }\n\n    // Handle realtime validation errors on the card element.\n  }, {\n    key: \"cardValdation\",\n    get: function get() {\n      var _this = this;\n      this.card.addEventListener('change', function (event) {\n        if (event.error) {\n          var html = \"\\n                    <span class=\\\"icon\\\" role=\\\"alert\\\">\\n                        <i class=\\\"fas fa-times\\\"></i>\\n                    </span>\\n                    <span>\".concat(event.error.message, \"</span>\\n                \");\n          _this.errorDiv.innerHTML = html;\n        } else {\n          _this.errorDiv.textContent = '';\n        }\n      });\n    }\n  }, {\n    key: \"submitCheckoutForm\",\n    get: function get() {\n      var _this2 = this;\n      this.paymentForm.addEventListener('submit', function (event) {\n        event.preventDefault(); // Prevent default behaviour.\n        // Desable card and submit button to avoid multiple payment request.\n        _this2.card.update({\n          'disabled': true\n        });\n        _this2.paymentButton.disabled = true;\n        _this2.stripe.confirmCardPayment(_this2.clientSecretKey, {\n          payment_method: {\n            card: _this2.card\n          }\n        }).then(function (result) {\n          if (result.error) {\n            // Error message.\n            var html = \"\\n                        <span class=\\\"icon\\\" role=\\\"alert\\\">\\n                        <i class=\\\"fas fa-times\\\"></i>\\n                        </span>\\n                        <span>\".concat(result.error.message, \"</span>\");\n            // Append error message to the error div.\n            this.errorDiv.innerHTML = html;\n\n            // Enable card and submit button.\n            this.card.update({\n              'disabled': false\n            });\n            this.paymentButton.disabled = false;\n          } else {\n            // If there is no error, submit the form.\n            if (result.paymentIntent.status === 'succeeded') {\n              this.paymentForm.submit();\n            }\n          }\n        });\n      });\n    }\n  }]);\n  return GeoStripe;\n}();\nnew GeoStripe();\n\n// let stripePublicKey = document.getElementById('id_stripe_publc_key')\n//     .textContent.slice(1, -1);\n\n// let stripeClientSecretKey = document.getElementById('id_stripe_client_secret_key')\n//     .textContent.slice(1, -1);\n\n// const stripe = Stripe(stripePublicKey);\n// const elements = stripe.elements();\n\n// const style = {\n//    style: {\n//     base: {\n//       iconColor: '#c4f0ff',\n//       color: '#fff',\n//       fontWeight: '500',\n//       fontFamily: 'Roboto, Open Sans, Segoe UI, sans-serif',\n//       fontSize: '16px',\n//       fontSmoothing: 'antialiased',\n//       ':-webkit-autofill': {\n//         color: '#fce883',\n//       },\n//       '::placeholder': {\n//         color: '#87BBFD',\n//       },\n//     },\n//     invalid: {\n//       iconColor: '#FFC7EE',\n//       color: '#FFC7EE',\n//     },\n//   },\n// };\n\n// const card = elements.create('card');\n// card.mount('#card-element');\n\n// // Handle realtime validation errors on the card element\n// card.addEventListener('change', function (event) {\n//     var errorDiv = document.getElementById('card-errors');\n//     if (event.error) {\n//         var html = `\n//             <span class=\"icon\" role=\"alert\">\n//                 <i class=\"fas fa-times\"></i>\n//             </span>\n//             <span>${event.error.message}</span>\n//         `;\n//         errorDiv.innerHTML = html;\n//     } else {\n//         errorDiv.textContent = '';\n//     }\n// });\n\n// // Grab the payment form.\n// const form = document.getElementById('payment-form');\n\n// form.addEventListener('submit', function (ev) {\n\n//     ev.preventDefault();\n\n//     // Desable card and submit button to avoid multiple payment request.\n//     card.update({'disabled': true });\n//     paymentButton = document.getElementById('payment-button');\n//     paymentButton.disabled = true;\n\n//     stripe.confirmCardPayment(stripeClientSecretKey, {\n//         payment_method: {\n//             card: card,\n//         }\n//     }).then(function(result) {\n//         if (result.error) {\n//             // Error message div.\n//             const errorDiv = document.getElementById('card-errors');\n//             // Error message.\n//             const html = `\n//                 <span class=\"icon\" role=\"alert\">\n//                 <i class=\"fas fa-times\"></i>\n//                 </span>\n//                 <span>${result.error.message}</span>`;\n//             // Append error message to the error div.\n//             errorDiv.innerHTML = html;\n\n//             // Enable card and submit button.\n//             card.update({'disabled': false});\n//             paymentButton.disabled = false;\n\n//         } else { // If there is no error, submit the form.\n//             if (result.paymentIntent.status === 'succeeded') {\n//                 form.submit();\n//             }\n//         }\n//     });        \n\n// });\n\n//# sourceURL=webpack://geoai/./js/original/stripe/stripe_elements.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./js/original/stripe/stripe_elements.js"]();
/******/ 	
/******/ })()
;